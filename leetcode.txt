leetcode注册

https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/

13936931626
1982629AB

fly123
1982629AB 
--------------------------------------
leetcode开会



https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/

557. 反转字符串中的单词 III

给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。

示例 1:

输入: "Let's take LeetCode contest"
输出: "s'teL ekat edoCteeL tsetnoc" 

注意：在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。


mkdir -p code/string
touch code/string/lesson1.js
mkdir -p test/string
mkdir test/string/lesson1.test.js


export default(str) => {
	return ''
}


export default(str) => {
	//根据空格来进行分割
	let arr = str.split(' ')
	//对数组进行遍历,然后每个元素进行反转
	let result = arr.map(item => {
		return item.split('').reverse().join('')
	})
	return result.join(' ')
}

/**
 * @param {string} s
 * @return {string}
 */
var reverseWords = function(s) {
    let arr = s.split(' ')
	let result = arr.map(item => {
		return item.split('').reverse().join('')
	})
	return result.join(' ')
    
};

//更优雅,但不好理解的写法
//对数组进行遍历,然后每个元素进行反转

//根据空格来进行分割

/**
 * @param {string} s
 * @return {string}
 */
var reverseWords = function(s) {

	return s.split(' ').map(item => {
		return item.split('').reverse().join('')
	}).join(' ')
    
};

正则的写法

JS中使用正则表达式g模式和非g模式的区别
g是global的缩写啊！
\s 是空格

/**
 * @param {string} s
 * @return {string}
 */
var reverseWords = function(s) {

	return s.split(/\s/g).map(item => {
		return item.split('').reverse().join('')
	}).join(' ')
    
};

leetcode不能提交,但可以运行
//用match
/**
 * @param {string} s
 * @return {string}
 */
var reverseWords = function(s) {

	return s.match(/[\w']+/g).map(item => {
		return item.split('').reverse().join('')
	}).join(' ')
    
};

计算子串原理讲解(18:31)


<<<<<<< HEAD
=======
数组题目介绍

下一节：电话号码组合-原理讲解(13:11)

https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/


给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。

示例:

输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

核心思想:拆


cd code/

mkdir array
touch array/lesson1.js

cd ../
cd test/
mkdir array
touch array/lesson1.test.js

export default(str) => {
	return ''
}


export default(str) => {
	let map = ['',1,'abc','def','ghi','jkl','mno','pqrs','tuv','wxyz'];
	return ''
}

export default(str) => {
	let map = ['',1,'abc','def','ghi','jkl','mno','pqrs','tuv','wxyz'];
	let num = str.split('')
	return ''
}

export default(str) => {
    //建立电话号码键盘映射
	let map = ['',1,'abc','def','ghi','jkl','mno','pqrs','tuv','wxyz'];
	//把输入字符串按单字符分割成数组,234 => [2,3,4]
	let num = str.split('')
	//保存键盘映射后的字母内容如 23 => ['abc','def']
	let code = []
	num.forEach(item=>{
		if(map[item]){
			code.push(map[item])
		}
	})
	return ''
}


export default(str) => {
    //建立电话号码键盘映射
	let map = ['',1,'abc','def','ghi','jkl','mno','pqrs','tuv','wxyz'];
	//把输入字符串按单字符分割成数组,234 => [2,3,4]
	let num = str.split('')
	//保存键盘映射后的字母内容如 23 => ['abc','def']
	let code = []
	num.forEach(item=>{
		if(map[item]){
			code.push(map[item])
		}
	})
	
	//匿名方法,给我一个数组
	let comb = (arr) => {
		//临时变量用来保存前两个组合的结果
		let tmp = []
		//最外层的循环是遍历每一个元素,里层的循环是遍历第二个元素
		for(let i=0,il=arr[0].length;i<il;i++){
			for(let j=0,jl=arr[1].length;j<jl;j++){
				//字符串模板
				temp.push('${arr[0][i]}${arr[1][j]}')
			}
		}
		//替换掉先前的
		arr.splice(0,2,tmp)
	}
	return ''
}

splice举例
t = [1,2,3,4,5]

t.splice(0,2,6)
这时t的结果为
[6,3,4,5]

//0,2包前不包后,是0,1的元素被替换


export default(str) => {
    //建立电话号码键盘映射
	let map = ['',1,'abc','def','ghi','jkl','mno','pqrs','tuv','wxyz'];
	//把输入字符串按单字符分割成数组,234 => [2,3,4]
	let num = str.split('')
	//保存键盘映射后的字母内容如 23 => ['abc','def']
	let code = []
	num.forEach(item=>{
		if(map[item]){
			code.push(map[item])
		}
	})
	
	//匿名方法,给我一个数组
	let comb = (arr) => {
		//临时变量用来保存前两个组合的结果
		let tmp = []
		//最外层的循环是遍历每一个元素,里层的循环是遍历第二个元素
		for(let i=0,il=arr[0].length;i<il;i++){
			for(let j=0,jl=arr[1].length;j<jl;j++){
				//字符串模板
				temp.push('${arr[0][i]}${arr[1][j]}')
			}
		}
		//替换掉先前的
		arr.splice(0,2,tmp)
		//要进行递归了
		if(arr.length>1){
			comb(arr)
		}else{
			return tmp
		}
		
		//这和tmp值是一样的,都被替换了就剩下一个了
		return arr[0]
	}
	return ''
}


export default(str) => {
    //建立电话号码键盘映射
	let map = ['',1,'abc','def','ghi','jkl','mno','pqrs','tuv','wxyz'];
	//把输入字符串按单字符分割成数组,234 => [2,3,4]
	let num = str.split('')
	//保存键盘映射后的字母内容如 23 => ['abc','def']
	let code = []
	num.forEach(item=>{
		if(map[item]){
			code.push(map[item])
		}
	})
	
	//匿名方法,给我一个数组
	let comb = (arr) => {
		//临时变量用来保存前两个组合的结果
		let tmp = []
		//最外层的循环是遍历每一个元素,里层的循环是遍历第二个元素
		for(let i=0,il=arr[0].length;i<il;i++){
			for(let j=0,jl=arr[1].length;j<jl;j++){
				//字符串模板
				tmp.push('${arr[0][i]}${arr[1][j]}')
			}
		}
		//替换掉先前的
		arr.splice(0,2,tmp)
		//要进行递归了
		if(arr.length>1){
			comb(arr)
		}else{
			return tmp
		}
		
		//这和tmp值是一样的,都被替换了就剩下一个了
		return arr[0]
	}
	//就后要调用comb(内部函数)
	return comb(code)
}

知识点:
Array.prototype.splice


执行可以,但提交说Line 16: TypeError: Cannot read property 'length' of undefined

/**
 * @param {string} digits
 * @return {string[]}
 */
var letterCombinations = function(digits) {
    let map = ['',1,'abc','def','ghi','jkl','mno','pqrs','tuv','wxyz']
    let num = digits.split('')
    let code = []
    num.forEach(item=>{
		if(map[item]){
			code.push(map[item])
		}
	})
    let comb = (arr) => {
        let tmp = []
        for(let i=0,il=arr[0].length;i<il;i++){
			for(let j=0,jl=arr[1].length;j<jl;j++){
				tmp.push('${arr[0][i]}${arr[1][j]}')
			}
		}
        arr.splice(0,2,tmp)
        if(arr.length>1){
			comb(arr)
		}else{
			return tmp
		}
        return arr[0]
    }
    return comb(code)
    
};

下面的例子就行
/**
 * @param {string} digits
 * @return {string[]}
 */
var letterCombinations = function(digits) {
    
    if (!digits.length) return [];

    let multiply = (arr1, arr2) => {
        let innerRes = []
        for (let i = 0, len1 = arr1.length; i < len1; ++i) {
            for (let j = 0, len2 = arr2.length; j < len2; ++j) {
                innerRes.push(arr1[i]+arr2[j])
            }
        }
        return innerRes
    }
    let res = [], arr = [[],[],['a','b','c'],['d','e','f'],['g','h','i'],['j','k','l'],['m','n','o'],['p','q','r','s'],['t','u','v'],['w','x','y','z']]
    return digits.split('').reduce((prev, cur) => {
        return multiply(prev, arr[Number(cur)])
    }, [''])
    
};


下一节：卡牌分组-原理讲解(17:31)

4-1 重复的子串-原理讲解

https://leetcode-cn.com/problems/repeated-substring-pattern/

459. 重复的子字符串
题目描述
评论 (27)
官方题解
提交记录

给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。

示例 1:

输入: "abab"

输出: True

解释: 可由子字符串 "ab" 重复两次构成。

示例 2:

输入: "aba"

输出: False

示例 3:

输入: "abcabcabcabc"

输出: True

解释: 可由子字符串 "abc" 重复四次构成。 (或者子字符串 "abcabc" 重复两次构成。)


重复的子字符串

\w  匹配所有字母数字,等同于[a-zA-Z0-9_]
\W  匹配非所有字母数字,既符号,等同于[^\w]
\d  匹配数字[0-9]
\D  匹配非数字[^\d]
\s  匹配所有空格字符,等同于[\t\n\f\r\p{Z}]
\S  匹配所有非空格字符[^\s]
\f  匹配一个换页符
\n  匹配一个换行符
\r  匹配一个回车符
\t  匹配一个制表符
\v  匹配一个垂直制表符
\p  匹配CR/LF(等同于\r\n)),用来匹配DOS终止符

https://developer.mozilla.org./zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions


模式匹配
要匹配的内容
abcabcd

{[a-z]}

{\w}

至少要匹配一次

{\w+}

下一节：重复的子串-代码演示(05:42)


匹配一次
{\w+}\1

如何匹配多资呢?
对启示和结尾进行一次拦截

^{\w+}\1$

还得一次多次

^{\w+}\1+$

mkdir regexp
touch regexp/lesson1.text.js

cd ../code/
mkdir regexp
touch regexp/lesson1.js

export default (str) => {
	return ''
}

export default (str) => {
	var reg = /^{\w+}\1+$/
	return reg.test(str)
}


知识点:
	重视技术,知识全面
	
	

5-1 冒泡排序

（数据结构）十分钟搞定时间复杂度（算法的时间复杂度）

https://www.jianshu.com/p/f4cca5ce055a

cd code/
mkdir sort
touch sort/lesson1-1.js
cd ../test/
mkdir sort
touch sort/lesson1-1.test.js

export default (arr) => {
	return arr
}


export default (arr) => {
	//冒泡排序
	for(let i = arr.length -1 , tmp; i > 0 ; i--){
		for(let j = 0 ; j < i ; j++){
			tmp = arr[j]
			if(tmp > arr[j+1]){
				arr[j] = arr[j+1]
				arr[j+1] = tmp
			}
		}
	}
	return arr
}

6-1 复原IP地址-原理讲解

https://leetcode-cn.com/problems/restore-ip-addresses/

93. 复原IP地址
题目描述
评论 (32)
官方题解
提交记录

给定一个只包含数字的字符串，复原它并返回所有可能的 IP 地址格式。

示例:

输入: "25525511135"
输出: ["255.255.11.135", "255.255.111.35"]


复原IP地址-代码演示(16:46)

mkdir recur
touch recur/lesson1.js
cd ../test
mkdir recur
touch recur/lesson1.test.js

export default (arr) => {
	return []
}

export default (arr) => {
	//保存所有符合条件的ip
	let r = []
	
	let search = (cur,sub) => {
	
	}
	
	return r
}


export default (arr) => {
	//保存所有符合条件的ip
	let r = []
	
	let search = (cur,sub) => {
		if(cur.length === 4 && cur.join('') === str){
			r.push(cur.join('.'))
		}
	}
	
	return r
}


export default (arr) => {
	//保存所有符合条件的ip
	let r = []
	
	let search = (cur,sub) => {
		if(cur.length === 4 && cur.join('') === str){
			r.push(cur.join('.'))
		}else{
			for(let i = 0,len = Math.min(3,sub.length), tmp; i < len ; i++){
				tmp = sub.substr(0 , i + 1)
				if(tmp < 256){
					//合并子串
					search(cur.concat([tmp]),sub.substr(i+1))
				}
			}
		}
	}
	
	//上面只是定义,并没有执行呀!
	search([],str)
	
	return r
}

递归的本质
	每个处理过程是相同的,输入和输出是相同的,处理次数未知
	边界条件
	
	
高数工具
https://www.baidu.com/s?wd=%E9%AB%98%E6%95%B0%E5%B7%A5%E5%85%B7&rsv_spt=1&rsv_iqid=0xe8fade0600142253&issp=1&f=8&rsv_bp=0&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=1&rsv_sug3=12&rsv_sug1=9&rsv_sug7=101

数字帝国
https://zh.numberempire.com/

