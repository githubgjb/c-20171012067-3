//
// Created by liuyubobobo on 4/25/17.
//

#ifndef CHAPTER_03_COMPLETED_CODE_MERGESORTO_H
#define CHAPTER_03_COMPLETED_CODE_MERGESORTO_H

#include <iostream>
#include <algorithm>
#include "InsertionSort.h"

using namespace std;

// 在本章所介绍的优化的归并排序中, merge函数并没有改变
// 将arr[l...mid]和arr[mid+1...r]两部分进行归并
template<typename  T>
void __mergeO(T arr[], int l, int mid, int r){

	//* VS不支持动态长度数组, 即不能使用 T aux[r-l+1]的方式申请aux的空间
	//* 使用VS的同学, 请使用new的方式申请aux空间
	//* 使用new申请空间, 不要忘了在__merge函数的最后, delete掉申请的空间:)
	//T aux[r - l + 1];
	T *aux = new T[r-l+1];

	for (int i = l; i <= r; i++)
		aux[i - l] = arr[i];

	// 初始化，i指向左半部分的起始索引位置l；j指向右半部分起始索引位置mid+1
	int i = l, j = mid + 1;
	for (int k = l; k <= r; k++){

		if (i > mid){  // 如果左半部分元素已经全部处理完毕
			arr[k] = aux[j - l]; j++;
		}
		else if (j > r){  // 如果右半部分元素已经全部处理完毕
			arr[k] = aux[i - l]; i++;
		}
		else if (aux[i - l] < aux[j - l]) {  // 左半部分所指元素 < 右半部分所指元素
			arr[k] = aux[i - l]; i++;
		}
		else{  // 左半部分所指元素 >= 右半部分所指元素
			arr[k] = aux[j - l]; j++;
		}
	}

	delete[] aux;
}

// 使用优化的归并排序算法, 对arr[l...r]的范围进行排序
template<typename T>
void __mergeSortO(T arr[], int l, int r){

	// 优化2: 对于小规模数组, 使用插入排序
	if (r - l <= 15){
		insertionSort(arr, l, r);
		return;
	}

	int mid = (l + r) / 2;
	__mergeSortO(arr, l, mid);
	__mergeSortO(arr, mid + 1, r);

	// 优化1: 对于arr[mid] <= arr[mid+1]的情况,不进行merge
	// 对于近乎有序的数组非常有效,但是对于一般情况,有一定的性能损失
	if (arr[mid] > arr[mid + 1])
		__mergeO(arr, l, mid, r);
}

// 优化的归并排序算法
// 在课程中, 主要向大家介绍了归并排序的两个优化点
// 关于归并排序的更多优化, 请参考本章节后续的补充内容
template<typename T>
void mergeSortO(T arr[], int n){

	__mergeSortO(arr, 0, n - 1);
}

#endif //CHAPTER_03_COMPLETED_CODE_MERGESORTO_H
