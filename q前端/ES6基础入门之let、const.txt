let 

const

块级作用域

编辑器
VS Code Atom  Sublime 或IDE WebStrorm

环境
Chrome  Node.js

浏览器标准支持
http://kangax.github.io/compat-table/es6/

2-1 let

var

window.location.href === location.href

对全局进行污染

<script type="text/javascript">
</script>


<script type="text/javascript">
	var age = 14;
	console.log(window.age);
</script>

let和var的主要区别

let声明的变量只在当前(块极)作用域内有效
let声明的变量不能被重复声明
不存在变量提升

ES6之前的作用域

全局作域
函数数作用域
eval作用域(字符串子的时候)

块级作用域
通俗的讲,就是一对花括号中的区域{...}


/ 热门框架Vue开发WebApp / 步骤一 · 2-4 使用let实现面试常见小例子 

生成十个按钮,每个按钮点击的时候弹出1-10

var i = 0;
for (i=1 ; i<=10 ; i++) {
	(function(i){
		var btn = document.createElement('button');
		btn.innerText = i;
		btn.onclick = function(){
			alert(i);
		}
		document.body.appendChild(btn);
	})(i);
}

独立的函数作用域

用let会省事一些,因为它有块级作域

for (let i=1 ; i<=10 ; i++) {
	var btn = document.createElement('button');
	btn.innerText = i;
	btn.onclick = function(){
		alert(i);
	}
	document.body.appendChild(btn);
}


2-6 const

常量,不可改变量 

常量必须被赋值

const引用类型可以修改

const xiaoming = {
	age: 14,
	name:'小明'
};

console.log(xiaoming);
xiaoming.age = 22;
console.log(xiaoming);

冻结
Object.freeze();


const xiaoming = {
	age: 14,
	name:'小明'
};
Object.freeze(xiaoming);
console.log(xiaoming);
xiaoming.age = 22;
console.log(xiaoming);



 2-6 const
 
 2-8 const扩展

es6之前怎么声明常量

//Object.defineProperty();

var CST = {};

Object.defineProperty(CST,'BASE_NAME',{
	value: '小明',
	writable: false
});

//要是放到window对象,就是全局的了
Object.defineProperty(window,'BASE_NAME',{
	value: '小明',
	writable: false
});

防止对象被扩展
Object.seal(CST);

ES6变量的解构赋值


扩展运算符  ...

步骤一 · 2-3 编程练习

2-5 对象的解构赋值(一)

10:30秒处

2-5 对象的解构赋值(一)
